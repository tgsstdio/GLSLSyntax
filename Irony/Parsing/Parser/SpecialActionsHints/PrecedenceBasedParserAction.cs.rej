--- PrecedenceBasedParserAction.cs
+++ PrecedenceBasedParserAction.cs
@@ -28,6 +28,24 @@
       base.DefaultAction = _shiftAction = new ShiftParserAction(shiftTerm, newShiftState);
     }
 
+    private bool CheckMustReduce(ParsingContext context) {
+      var input = context.CurrentParserInput;
+      var stackCount = context.ParserStack.Count;
+      var prodLength = _reduceAction.Production.RValues.Count;
+      for (int i = 1; i <= prodLength; i++) {
+        var prevNode = context.ParserStack[stackCount - i];
+        if (prevNode == null) continue;
+        if (prevNode.Precedence == BnfTerm.NoPrecedence) continue;
+        //if previous operator has the same precedence then use associativity
+        if (prevNode.Precedence == input.Precedence)
+          return (input.Associativity == Associativity.Left); //if true then Reduce
+        else
+          return (prevNode.Precedence > input.Precedence); //if true then Reduce
+      }
+      //If no operators found on the stack, do shift
+      return false;
+    }
+/*
     private static bool CheckMustReduce(ParsingContext context) {
       var input = context.CurrentParserInput;
       for (int i = context.ParserStack.Count - 1; i >= 0; i--) {
